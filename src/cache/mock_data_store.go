// Code generated by MockGen. DO NOT EDIT.
// Source: cache/data_store.go

// Package cache is a generated GoMock package.
package cache

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetCount mocks base method
func (m *MockDataStore) GetCount() (uint, error) {
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount
func (mr *MockDataStoreMockRecorder) GetCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockDataStore)(nil).GetCount))
}

// Set mocks base method
func (m *MockDataStore) Set(key string, object interface{}) error {
	ret := m.ctrl.Call(m, "Set", key, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockDataStoreMockRecorder) Set(key, object interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDataStore)(nil).Set), key, object)
}

// Find mocks base method
func (m *MockDataStore) Find(key string, object interface{}) error {
	ret := m.ctrl.Call(m, "Find", key, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockDataStoreMockRecorder) Find(key, object interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDataStore)(nil).Find), key, object)
}

// RemoveOld mocks base method
func (m *MockDataStore) RemoveOld() error {
	ret := m.ctrl.Call(m, "RemoveOld")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOld indicates an expected call of RemoveOld
func (mr *MockDataStoreMockRecorder) RemoveOld() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOld", reflect.TypeOf((*MockDataStore)(nil).RemoveOld))
}

// Close mocks base method
func (m *MockDataStore) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDataStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataStore)(nil).Close))
}
